---
import { getImage } from 'astro:assets';
import defaultProjectDarkImage from "../rectangle-code-dark-mode.svg";
import type { ImageMetadata } from 'astro';

interface Props extends astroHTML.JSX.AnchorHTMLAttributes {
    projectName: string,
    projectImgSrc?: string | ImageMetadata,
    synopsis: string,
    "data-aos"?: string,
    "data-aos-duration"?: string,
    "data-aos-offset"?: string,
    "data-aos-delay"?: string,
    "data-aos-anchor-placement"?: string,
};

const { projectName, projectImgSrc, synopsis, ...props} = Astro.props;
const projectImg = projectImgSrc !== undefined ? await getImage({src: projectImgSrc}) : null;
---
<a {...props}>
    <article class="w-72 bg-slate-100 dark:bg-slate-950 backdrop-blur rounded-lg border shadow-md shadow-gray-400 overflow-hidden">
        <h2 class="text-2xl p-2 font-bold">{projectName}</h2>
        <div class="relative">
            <img class="rounded-lg backdrop-blur-2xl bg-gray-800" src={projectImg?.src ?? defaultProjectDarkImage.src} alt={null}/>
            <p class="absolute w-full text-white text-center text-lg top-1/2 px-4 py-2 opacity-0">{synopsis}</p>
        </div>
    </article>
</a>
<style>
article p {
    transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);
}

article img {
    transition: filter 150ms cubic-bezier(0.4, 0, 0.2, 1);
}

article:hover p {
    transform: translateY(-50%);
    opacity: 1;
}

article:hover img {
    --tw-blur: blur(4px);
    --tw-brightness: brightness(0.4);
    filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
</style>
